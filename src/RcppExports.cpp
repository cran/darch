// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// applyDropoutMaskCpp
NumericMatrix applyDropoutMaskCpp(NumericMatrix data, NumericVector mask);
RcppExport SEXP darch_applyDropoutMaskCpp(SEXP dataSEXP, SEXP maskSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mask(maskSEXP);
    __result = Rcpp::wrap(applyDropoutMaskCpp(data, mask));
    return __result;
END_RCPP
}
// sigmoidUnitCpp
List sigmoidUnitCpp(NumericMatrix input);
RcppExport SEXP darch_sigmoidUnitCpp(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type input(inputSEXP);
    __result = Rcpp::wrap(sigmoidUnitCpp(input));
    return __result;
END_RCPP
}
// softmaxUnitCpp
List softmaxUnitCpp(NumericMatrix input);
RcppExport SEXP darch_softmaxUnitCpp(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type input(inputSEXP);
    __result = Rcpp::wrap(softmaxUnitCpp(input));
    return __result;
END_RCPP
}
// rectifiedLinearUnitCpp
List rectifiedLinearUnitCpp(NumericMatrix input);
RcppExport SEXP darch_rectifiedLinearUnitCpp(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type input(inputSEXP);
    __result = Rcpp::wrap(rectifiedLinearUnitCpp(input));
    return __result;
END_RCPP
}
// softplusUnitCpp
List softplusUnitCpp(NumericMatrix input);
RcppExport SEXP darch_softplusUnitCpp(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type input(inputSEXP);
    __result = Rcpp::wrap(softplusUnitCpp(input));
    return __result;
END_RCPP
}
// exponentialLinearUnitCpp
List exponentialLinearUnitCpp(NumericMatrix input, double alpha);
RcppExport SEXP darch_exponentialLinearUnitCpp(SEXP inputSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type input(inputSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    __result = Rcpp::wrap(exponentialLinearUnitCpp(input, alpha));
    return __result;
END_RCPP
}
// ditherCpp
void ditherCpp(NumericMatrix data, NumericVector columnMask);
RcppExport SEXP darch_ditherCpp(SEXP dataSEXP, SEXP columnMaskSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type columnMask(columnMaskSEXP);
    ditherCpp(data, columnMask);
    return R_NilValue;
END_RCPP
}
// maxoutUnitCpp
void maxoutUnitCpp(NumericMatrix activations, NumericMatrix derivatives, int poolSize, NumericVector dropoutMask);
RcppExport SEXP darch_maxoutUnitCpp(SEXP activationsSEXP, SEXP derivativesSEXP, SEXP poolSizeSEXP, SEXP dropoutMaskSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type activations(activationsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type derivatives(derivativesSEXP);
    Rcpp::traits::input_parameter< int >::type poolSize(poolSizeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dropoutMask(dropoutMaskSEXP);
    maxoutUnitCpp(activations, derivatives, poolSize, dropoutMask);
    return R_NilValue;
END_RCPP
}
// maxoutWeightUpdateCpp
void maxoutWeightUpdateCpp(NumericMatrix inc, int poolSize);
RcppExport SEXP darch_maxoutWeightUpdateCpp(SEXP incSEXP, SEXP poolSizeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type inc(incSEXP);
    Rcpp::traits::input_parameter< int >::type poolSize(poolSizeSEXP);
    maxoutWeightUpdateCpp(inc, poolSize);
    return R_NilValue;
END_RCPP
}
// minimizeCpp
List minimizeCpp(NumericVector x, Function f, int length, double red, List dims, NumericMatrix data, NumericMatrix target, int epochSwitch, Function matMult);
RcppExport SEXP darch_minimizeCpp(SEXP xSEXP, SEXP fSEXP, SEXP lengthSEXP, SEXP redSEXP, SEXP dimsSEXP, SEXP dataSEXP, SEXP targetSEXP, SEXP epochSwitchSEXP, SEXP matMultSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    Rcpp::traits::input_parameter< int >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< double >::type red(redSEXP);
    Rcpp::traits::input_parameter< List >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type target(targetSEXP);
    Rcpp::traits::input_parameter< int >::type epochSwitch(epochSwitchSEXP);
    Rcpp::traits::input_parameter< Function >::type matMult(matMultSEXP);
    __result = Rcpp::wrap(minimizeCpp(x, f, length, red, dims, data, target, epochSwitch, matMult));
    return __result;
END_RCPP
}
// normalizeWeightsCpp
void normalizeWeightsCpp(NumericMatrix weights, float bound);
RcppExport SEXP darch_normalizeWeightsCpp(SEXP weightsSEXP, SEXP boundSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< float >::type bound(boundSEXP);
    normalizeWeightsCpp(weights, bound);
    return R_NilValue;
END_RCPP
}
// rpropGradientsCpp
void rpropGradientsCpp(NumericMatrix gg, NumericMatrix gradients);
RcppExport SEXP darch_rpropGradientsCpp(SEXP ggSEXP, SEXP gradientsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type gg(ggSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type gradients(gradientsSEXP);
    rpropGradientsCpp(gg, gradients);
    return R_NilValue;
END_RCPP
}
// rpropDeltaCpp
void rpropDeltaCpp(NumericMatrix gg, NumericMatrix delta, double inc, double dec, double minDelta, double maxDelta);
RcppExport SEXP darch_rpropDeltaCpp(SEXP ggSEXP, SEXP deltaSEXP, SEXP incSEXP, SEXP decSEXP, SEXP minDeltaSEXP, SEXP maxDeltaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type gg(ggSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type inc(incSEXP);
    Rcpp::traits::input_parameter< double >::type dec(decSEXP);
    Rcpp::traits::input_parameter< double >::type minDelta(minDeltaSEXP);
    Rcpp::traits::input_parameter< double >::type maxDelta(maxDeltaSEXP);
    rpropDeltaCpp(gg, delta, inc, dec, minDelta, maxDelta);
    return R_NilValue;
END_RCPP
}
// rpropDeltaWiRpropPlus
void rpropDeltaWiRpropPlus(NumericMatrix gg, NumericMatrix deltaW, NumericMatrix gradients, NumericMatrix delta, double newE, double oldE);
RcppExport SEXP darch_rpropDeltaWiRpropPlus(SEXP ggSEXP, SEXP deltaWSEXP, SEXP gradientsSEXP, SEXP deltaSEXP, SEXP newESEXP, SEXP oldESEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type gg(ggSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type deltaW(deltaWSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type gradients(gradientsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type newE(newESEXP);
    Rcpp::traits::input_parameter< double >::type oldE(oldESEXP);
    rpropDeltaWiRpropPlus(gg, deltaW, gradients, delta, newE, oldE);
    return R_NilValue;
END_RCPP
}
